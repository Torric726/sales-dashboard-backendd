# app.py
from flask import Flask, jsonify
from flask_cors import CORS
from config import config # Importa el diccionario de configuraci√≥n
from models import init_db, db # Importa la funci√≥n de inicializaci√≥n de DB y la instancia de DB
from routes.sales_routes import sales_bp # Importa el Blueprint de rutas de ventas
import os
from sqlalchemy import text # Necesario para ejecutar la consulta de prueba de la base de datos

def create_app(config_name=None):
    """
    Funci√≥n de f√°brica para crear y configurar la aplicaci√≥n Flask.
    Permite usar diferentes configuraciones (desarrollo, producci√≥n).
    """
    # Si no se especifica un nombre de configuraci√≥n, usa la variable de entorno FLASK_CONFIG o 'default'
    if config_name is None:
        config_name = os.environ.get('FLASK_CONFIG', 'default')

    app = Flask(__name__) # Inicializa la aplicaci√≥n Flask
    app.config.from_object(config[config_name]) # Carga la configuraci√≥n desde config.py

    # Configura CORS para permitir solicitudes desde tu frontend de Node.js
    # Es crucial que 'http://localhost:5173' coincida con la URL de tu frontend
    CORS(app, origins=[
    'http://localhost:5173',
    'http://localhost:8080', # <--- ¬°AGREGA ESTA L√çNEA!
    'https://*.lovable.app',
    'https://*.lovableproject.com'
])

    # Inicializa la base de datos con la aplicaci√≥n Flask
    init_db(app)

    # Registra el Blueprint con las rutas de ventas
    app.register_blueprint(sales_bp)

    # Bloque para interactuar con la base de datos al iniciar la aplicaci√≥n
    # Esto asegura que la base de datos est√© lista y que las tablas se creen.
    with app.app_context():
        try:
            # Intenta ejecutar una consulta simple para verificar la conexi√≥n a PostgreSQL
            db.session.execute(text('SELECT 1'))
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")

            # Crea todas las tablas definidas en tus modelos (si no existen)
            db.create_all()
            print("‚úÖ Tablas de base de datos creadas/verificadas")

            # Muestra la URL de conexi√≥n (sin la contrase√±a por seguridad en la consola)
            db_url = app.config['SQLALCHEMY_DATABASE_URI']
            # Extrae la parte despu√©s del '@' para ocultar las credenciales
            safe_url = db_url.split('@')[1] if '@' in db_url else db_url
            print(f"üîó Conectado a: postgresql://***@{safe_url}")

        except Exception as e:
            # Si hay un error al conectar o crear tablas, impr√≠melo
            print(f"‚ùå Error conectando a PostgreSQL o creando tablas: {e}")
            print("üîß Verifica que PostgreSQL est√© ejecut√°ndose y que las credenciales en .env sean correctas.")
            # Opcional: podr√≠as querer salir de la aplicaci√≥n aqu√≠ si la DB es cr√≠tica

    # Ruta principal de la API que devuelve informaci√≥n general
    @app.route('/')
    def index():
        return jsonify({
            'message': 'Sales Dashboard API con PostgreSQL',
            'version': '1.0.0',
            'database': 'PostgreSQL',
            'endpoints': [
                '/api/health',
                '/api/test/connection', # Puedes usar /api/database/info para info m√°s detallada
                '/api/data/load (POST)',
                '/api/data/all',
                '/api/analytics/summary',
                '/api/database/info'
            ]
        })

    return app

# Punto de entrada principal cuando se ejecuta el script directamente
if __name__ == '__main__':
    app = create_app() # Crea la aplicaci√≥n con la configuraci√≥n por defecto
    print("üöÄ Iniciando servidor Flask con PostgreSQL...")
    print("üìä Sales Dashboard API")
    print("üêò Base de datos: PostgreSQL")
    print("üåê Servidor: http://localhost:5000")
    # Inicia el servidor Flask en modo depuraci√≥n (√∫til para desarrollo)
    # host='0.0.0.0' permite que la app sea accesible desde otras m√°quinas en la red local
    app.run(debug=True, host='0.0.0.0', port=5000)